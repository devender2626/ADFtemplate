{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-solicitations-intg"
		},
		"ls_at_solicitfiles_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "saSolicitations"
		},
		"ls_azure_function_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://fa-solicitations-intg.azurewebsites.net"
		},
		"ls_kv_solicitations_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-solicitations-intg.vault.azure.net/"
		},
		"ls_sa_solicitations_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "saSolicitations"
		},
		"tr_solicitation_error_properties_pl_solicit_error_file_gen_parameters_fileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"tr_solicitation_error_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/19d8d1ac-3f00-4c5a-a1b6-6f65a774c7c2/resourceGroups/rgelitapoc/providers/Microsoft.Storage/storageAccounts/sasolicitationsintg"
		},
		"tr_solicitation_inbound_properties_pl_solicit_inbound_file_load_parameters_fileName": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"tr_solicitation_inbound_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/19d8d1ac-3f00-4c5a-a1b6-6f65a774c7c2/resourceGroups/rgelitapoc/providers/Microsoft.Storage/storageAccounts/sasolicitationsintg"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_solicit_error_file_gen')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckFileNameCorrect",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(endswith(toUpper(pipeline().parameters.fileName), '.TXT'), and(equals(length(split(pipeline().parameters.fileName, '_')), 5), or(contains(toUpper(pipeline().parameters.fileName), 'ENROLLMENT'), contains(toUpper(pipeline().parameters.fileName), 'UPDATE'))))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CreateFileFromAzureTable",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureTableSource",
											"azureTableSourceQuery": {
												"value": "PartitionKey eq '@{toUpper(pipeline().parameters.fileName)}' and RowKey ne 'FileInfo-@{pipeline().parameters.fileName}'",
												"type": "Expression"
											},
											"azureTableSourceIgnoreTableNotFound": false
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Data",
														"type": "String"
													},
													"sink": {
														"type": "String",
														"ordinal": 1
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_table_solicit_files",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob_solicit_files_error",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@toUpper(pipeline().parameters.fileName)",
													"type": "Expression"
												},
												"container": "processed"
											}
										}
									]
								},
								{
									"name": "DataFlowSolicitFilesProcessError",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "CreateFileFromAzureTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_solicit_files_process_error",
											"type": "DataFlowReference",
											"parameters": {
												"filename": {
													"value": "'@{pipeline().parameters.fileName}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"filename": {
														"value": "@toUpper(pipeline().parameters.fileName)",
														"type": "Expression"
													}
												},
												"sink1": {
													"container": "processed"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								},
								{
									"name": "DeleteFileFromProcessedError",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "DataFlowSolicitFilesProcessError",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_blob_solicit_files_error",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"container": "processederror"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false
										}
									}
								},
								{
									"name": "DeleteFileFromProcessed",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "DataFlowSolicitFilesProcessError",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_blob_solicit_files_error",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@toUpper(pipeline().parameters.fileName)",
													"type": "Expression"
												},
												"container": "processed"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false
										}
									}
								},
								{
									"name": "CreateErrorFile",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DataFlowSolicitFilesProcessError",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_blob_solicit_files_archive",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@replace(toUpper(pipeline().parameters.fileName),last(split(toUpper(pipeline().parameters.fileName),'.')),'ERR')",
													"type": "Expression"
												},
												"container": "processed"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob_solicit_files_archive",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@replace(pipeline().parameters.fileName,last(split(pipeline().parameters.fileName,'.')),'err')",
													"type": "Expression"
												},
												"container": "error"
											}
										}
									]
								},
								{
									"name": "DeleteFileFromProcessedErrorFile",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CreateErrorFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_blob_solicit_files_error",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@replace(toUpper(pipeline().parameters.fileName),last(split(toUpper(pipeline().parameters.fileName),'.')),'ERR')",
													"type": "Expression"
												},
												"container": "processed"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_table_solicit_files')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_solicit_files_error')]",
				"[concat(variables('factoryId'), '/dataflows/df_solicit_files_process_error')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_solicit_files_archive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_solicit_inbound_file_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckFileHeaderFormat",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "InitialSalesOrderNumber",
											"type": "String"
										},
										"sink": {
											"name": "InitialSalesOrderNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "String"
										},
										"sink": {
											"name": "CustomerID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ApplyDate",
											"type": "String"
										},
										"sink": {
											"name": "ApplyDate",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "OpenDate",
											"type": "String"
										},
										"sink": {
											"name": "OpenDate",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CloseDate",
											"type": "String"
										},
										"sink": {
											"name": "CloseDate",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LastNameKana",
											"type": "String"
										},
										"sink": {
											"name": "LastNameKana",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FirstNameKana",
											"type": "String"
										},
										"sink": {
											"name": "FirstNameKana",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Birthday",
											"type": "String"
										},
										"sink": {
											"name": "Birthday",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PostalCode",
											"type": "String"
										},
										"sink": {
											"name": "PostalCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Address",
											"type": "String"
										},
										"sink": {
											"name": "Address",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TelephoneNumber",
											"type": "String"
										},
										"sink": {
											"name": "TelephoneNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "E-mail",
											"type": "String"
										},
										"sink": {
											"name": "E-mail",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SIMPhoneNumber",
											"type": "String"
										},
										"sink": {
											"name": "SIMPhoneNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ShopID",
											"type": "String"
										},
										"sink": {
											"name": "ShopID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SalesChannel",
											"type": "String"
										},
										"sink": {
											"name": "SalesChannel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ShopName",
											"type": "String"
										},
										"sink": {
											"name": "ShopName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ShopZipCode",
											"type": "String"
										},
										"sink": {
											"name": "ShopZipCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ShopAddress",
											"type": "String"
										},
										"sink": {
											"name": "ShopAddress",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ShopTelephoneNumber",
											"type": "String"
										},
										"sink": {
											"name": "ShopTelephoneNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DisconnectionReason",
											"type": "String"
										},
										"sink": {
											"name": "DisconnectionReason",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_solicit_files",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"container": "inbound"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_solicit_files_archive",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"container": "soliciteventinprogcontainer"
								}
							}
						]
					},
					{
						"name": "CreateBadFileOnFileHeaderFormatError",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CheckFileHeaderFormat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_blob_solicit_files_archive",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"container": "inbound"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_solicit_files_archive",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@replace(pipeline().parameters.fileName,last(split(pipeline().parameters.fileName,'.')),'bad')",
										"type": "Expression"
									},
									"container": "error"
								}
							}
						]
					},
					{
						"name": "DeleteFromInboundAfterFileHeaderCheck",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CheckFileHeaderFormat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob_solicit_files",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"container": "inbound"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false
							}
						}
					},
					{
						"name": "DeleteFromInboundAfterFileHeaderFormat",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CreateBadFileOnFileHeaderFormatError",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_blob_solicit_files",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									},
									"container": "inbound"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false
							}
						}
					},
					{
						"name": "CheckFileNameFormatAndExistence",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFileExistsInAzureTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [
							{
								"name": "filename",
								"value": "@item().name"
							}
						],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(activity('CheckFileExistsInAzureTable').output.count,0),and(endswith(toUpper(pipeline().parameters.fileName), '.TXT'), and(equals(length(split(pipeline().parameters.fileName, '_')), 5), or(contains(toUpper(pipeline().parameters.fileName), 'ENROLLMENT'), contains(toUpper(pipeline().parameters.fileName), 'UPDATE')))))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CreateBadFileOnFileNameOrDuplicateFileError",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".bad"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_blob_solicit_files_archive",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"container": "soliciteventinprogcontainer"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob_solicit_files_archive",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@replace(pipeline().parameters.fileName,last(split(pipeline().parameters.fileName,'.')),'bad')",
													"type": "Expression"
												},
												"container": "error"
											}
										}
									]
								},
								{
									"name": "DeleteInboudFileOnFileNameOrDuplicateFileError",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CreateBadFileOnFileNameOrDuplicateFileError",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_blob_solicit_files",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"container": "soliciteventinprogcontainer"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "DataFlowSolicitFilesProcess",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_solicit_files_process",
											"type": "DataFlowReference",
											"parameters": {
												"filename": {
													"value": "'@{pipeline().parameters.fileName}'",
													"type": "Expression"
												},
												"companycode": {
													"value": "'@{toUpper(last(take(split(pipeline().parameters.fileName, '_'), 1)))}'",
													"type": "Expression"
												},
												"dealercode": {
													"value": "'@{toUpper(last(take(split(pipeline().parameters.fileName, '_'), 2)))}'",
													"type": "Expression"
												},
												"Operation": {
													"value": "'@{toUpper(last(take(split(pipeline().parameters.fileName, '_'), 3)))}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"GetFileData": {
													"filename": {
														"value": "@pipeline().parameters.fileName",
														"type": "Expression"
													},
													"container": "soliciteventinprogcontainer"
												},
												"ProcessToFileDetails": {
													"container": "processed"
												},
												"ProcessToFileInfo": {
													"container": "processedfileinfo"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								},
								{
									"name": "CreateArchiveFileAfterDataFlow",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DataFlowSolicitFilesProcess",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_blob_solicit_files_archive",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"container": "soliciteventinprogcontainer"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob_solicit_files_archive",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"container": "archive"
											}
										}
									]
								},
								{
									"name": "DeleteFromInProgressAfterDataFlow",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CreateArchiveFileAfterDataFlow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_blob_solicit_files",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"container": "soliciteventinprogcontainer"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false
										}
									}
								},
								{
									"name": "CreateBadFileOnDataFlowError",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DataFlowSolicitFilesProcess",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_blob_solicit_files_archive",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"container": "soliciteventinprogcontainer"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_blob_solicit_files_archive",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@replace(pipeline().parameters.fileName,last(split(pipeline().parameters.fileName,'.')),'bad')",
													"type": "Expression"
												},
												"container": "error"
											}
										}
									]
								},
								{
									"name": "DeleteFromInProgressDataFlowError",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CreateBadFileOnDataFlowError",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_blob_solicit_files",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"container": "soliciteventinprogcontainer"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false
										}
									}
								},
								{
									"name": "CopyFileDetailRecordsToSolictFilesTable",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "DataFlowSolicitFilesProcess",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@replace(toUpper(pipeline().parameters.fileName),'.TXT','.csv')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureTableSink",
											"azureTableInsertType": "merge",
											"azureTablePartitionKeyName": "PartitionKey",
											"azureTableRowKeyName": "RowKey",
											"writeBatchSize": 10000
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "PartitionKey",
														"type": "String"
													},
													"sink": {
														"name": "PartitionKey",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RowKey",
														"type": "String"
													},
													"sink": {
														"name": "RowKey",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Data",
														"type": "String"
													},
													"sink": {
														"name": "Data",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "ds_blob_solicit_files",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"container": "processed"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_table_solicit_files",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "CopyFileInfoRecordToSolictFilesTable",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "CopyFileDetailRecordsToSolictFilesTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@replace(toUpper(pipeline().parameters.fileName),'.TXT','.csv')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureTableSink",
											"azureTableInsertType": "merge",
											"azureTablePartitionKeyName": "PartitionKey",
											"azureTableRowKeyName": "RowKey",
											"writeBatchSize": 10000
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "PartitionKey",
														"type": "String"
													},
													"sink": {
														"name": "PartitionKey",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RowKey",
														"type": "String"
													},
													"sink": {
														"name": "RowKey",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Data",
														"type": "String"
													},
													"sink": {
														"name": "Data",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "ds_blob_solicit_files",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"container": "processedfileinfo"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_table_solicit_files",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "TriggerQueueFunction",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "CopyFileInfoRecordToSolictFilesInfoTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": {
											"value": "@concat('QueueFile/',toUpper(pipeline().parameters.fileName))",
											"type": "Expression"
										},
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\"filename\":\"@{pipeline().parameters.fileName}\"}",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_azure_function",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "DeleteFromProcessedFileDetails",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyFileDetailRecordsToSolictFilesTable",
											"dependencyConditions": [
												"Succeeded",
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_blob_solicit_files",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"container": "processed"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{replace(toUpper(pipeline().parameters.fileName),'.TXT','.csv')}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "DeleteFromProcessedFileInfo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyFileInfoRecordToSolictFilesInfoTable",
											"dependencyConditions": [
												"Succeeded",
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_blob_solicit_files",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"container": "processedfileinfo"
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": false,
											"wildcardFileName": {
												"value": "@{replace(toUpper(pipeline().parameters.fileName),'.TXT','.csv')}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CopyFileInfoRecordToSolictFilesInfoTable",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "CopyFileInfoRecordToSolictFilesTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@replace(toUpper(pipeline().parameters.fileName),'.TXT','.csv')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureTableSink",
											"azureTableInsertType": "merge",
											"azureTablePartitionKeyName": "PartitionKey",
											"azureTableRowKeyName": "RowKey",
											"writeBatchSize": 10000
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "PartitionKey",
														"type": "String"
													},
													"sink": {
														"name": "PartitionKey",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RowKey",
														"type": "String"
													},
													"sink": {
														"name": "RowKey",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "String"
													},
													"sink": {
														"name": "Status"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "ds_blob_solicit_files",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@pipeline().parameters.fileName",
													"type": "Expression"
												},
												"container": "processedfileinfo"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_table_solicit_files_info",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "CheckFileExistsInAzureTable",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CheckFileHeaderFormat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceQuery": {
									"value": "PartitionKey eq '@{toUpper(pipeline().parameters.fileName)}'",
									"type": "Expression"
								},
								"azureTableSourceIgnoreTableNotFound": false
							},
							"dataset": {
								"referenceName": "ds_table_solicit_files",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"variables": {
					"delaercode": {
						"type": "String"
					},
					"compancode": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_solicit_files')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_solicit_files_archive')]",
				"[concat(variables('factoryId'), '/datasets/ds_table_solicit_files')]",
				"[concat(variables('factoryId'), '/dataflows/df_solicit_files_process')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_function')]",
				"[concat(variables('factoryId'), '/datasets/ds_table_solicit_files_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_solicit_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_solicitations",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_solicitations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_solicit_files_archive')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_solicitations",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_solicitations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_solicit_files_error')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_solicitations",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					},
					"container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_solicitations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_solicit_files_processor')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_solicitations",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_solicitations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_solicit_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sa_solicitations",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"container": "processed"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sa_solicitations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_table_solicit_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_at_solicitfiles",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureTable",
				"schema": [],
				"typeProperties": {
					"tableName": "SolicitFiles"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_at_solicitfiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_table_solicit_files_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_at_solicitfiles",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureTable",
				"schema": [],
				"typeProperties": {
					"tableName": "SolicitFilesInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_at_solicitfiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_at_solicitfiles')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureTableStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_kv_solicitations",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('ls_at_solicitfiles_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_kv_solicitations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azure_function')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('ls_azure_function_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_kv_solicitations",
							"type": "LinkedServiceReference"
						},
						"secretName": "fasolicitations"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_kv_solicitations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_kv_solicitations')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_kv_solicitations_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sa_solicitations')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_kv_solicitations",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('ls_sa_solicitations_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_kv_solicitations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_solicitation_error')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_solicit_error_file_gen",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileName": "[parameters('tr_solicitation_error_properties_pl_solicit_error_file_gen_parameters_fileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/processederror/blobs/",
					"ignoreEmptyBlobs": false,
					"scope": "[parameters('tr_solicitation_error_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_solicit_error_file_gen')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_solicitation_inbound')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_solicit_inbound_file_load",
							"type": "PipelineReference"
						},
						"parameters": {
							"fileName": "[parameters('tr_solicitation_inbound_properties_pl_solicit_inbound_file_load_parameters_fileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/inbound/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('tr_solicitation_inbound_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_solicit_inbound_file_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_solicit_files_process')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_blob_solicit_files",
								"type": "DatasetReference"
							},
							"name": "GetFileData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_blob_solicit_files_processor",
								"type": "DatasetReference"
							},
							"name": "ProcessToFileDetails"
						},
						{
							"dataset": {
								"referenceName": "ds_blob_solicit_files_processor",
								"type": "DatasetReference"
							},
							"name": "ProcessToFileInfo"
						}
					],
					"transformations": [
						{
							"name": "Transform"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "TransformToFileDetails"
						},
						{
							"name": "TransformToFileDetailsCSV"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "TransformFileinfo"
						},
						{
							"name": "TransformFileInfoCSV"
						},
						{
							"name": "TransformDateFields"
						},
						{
							"name": "CheckDateColumnsYear"
						}
					],
					"script": "parameters{\n\tfilename as string,\n\tcompanycode as string (\"AJP\"),\n\tdealercode as string (\"RSIM\"),\n\tOperation as string (\"ENROLLMENT\")\n}\nsource(output(\n\t\tInitialSalesOrderNumber as string,\n\t\tCustomerID as string,\n\t\tApplyDate as string,\n\t\tOpenDate as string,\n\t\tCloseDate as string,\n\t\tLastName as string,\n\t\tFirstName as string,\n\t\tLastNameKana as string,\n\t\tFirstNameKana as string,\n\t\tBirthday as string,\n\t\tPostalCode as string,\n\t\tAddress as string,\n\t\tTelephoneNumber as string,\n\t\t{E-mail} as string,\n\t\tSIMPhoneNumber as string,\n\t\tShopID as string,\n\t\tSalesChannel as string,\n\t\tShopName as string,\n\t\tShopZipCode as string,\n\t\tShopAddress as string,\n\t\tShopTelephoneNumber as string,\n\t\tDisconnectionReason as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\twildcardPaths:[($filename)],\n\tpartitionBy('hash', 1)) ~> GetFileData\nTransformDateFields derive(Status = \"Active\",\n\t\tcommandSourceType = \"File\",\n\t\tcommandSourceName = $filename,\n\t\tcampaignCode = $dealercode,\n\t\tError = iif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && SalesNumberCount> 1 ,\"Duplicate Records exists in file\", \niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && (isNull(Aggregate1@InitialSalesOrderNumber)),\"Mandatory field missing-InitialSalesOrderNumber\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && (length(Aggregate1@InitialSalesOrderNumber)>28),\"Field length exceeded-InitialSalesOrderNumber\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && (isNull(CustomerID)),\"Mandatory field missing-CustomerID\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && (length(CustomerID)>30),\"Field length exceeded -CustomerID\",\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(ApplyDate)) ,\"Mandatory field missing-ApplyDate\",\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(ApplyDatetoString)|| length(ApplyDatetoString)<1) ,\"Date should be valid date in yyyy/MM/dd Format-ApplyDate\",\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(OpenDate)) ,\"Mandatory field missing-OpenDate\",\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(OpenDatetoString) || length(OpenDatetoString)<1) ,\"Date should be valid date in yyyy/MM/dd Format-OpenDate\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(LastName)),\"Mandatory field missing-LastName\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(LastName) >50),\"Field length exceeded -LastName\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(FirstName)) ,\"Mandatory field missing-FirstName\", \niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(FirstName) >50) ,\"Field length exceeded -FirstName\", \niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(LastNameKana)),\"Mandatory field missing-LastNameKana\", \niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(LastNameKana) >50),\"Field length exceeded -LastNameKana\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(FirstNameKana)),\"Mandatory field missing-FirstNameKana\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(FirstNameKana) >50),\"Field length exceeded -FirstNameKana\",\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(Birthday)) ,\"Mandatory field missing-Birthday\", \niif((upper($Operation)==\"ENROLLMENT\") && (isNull(BirthDaytoString) || length(BirthDaytoString)<1) ,\"Date should be valid date in yyyy/MM/dd Format-Birthday\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(PostalCode)),\"Mandatory field missing-PostalCode\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(PostalCode)!=7),\"Field length should be 7 digit only-PostalCode\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(Address)),\"Mandatory field missing-Address\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(Address)>100),\"Field length exceeded -Address\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(TelephoneNumber)),\"Mandatory field missing-TelephoneNumber\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(TelephoneNumber)>15),\"Field length exceeded-TelephoneNumber\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull({E-mail})),\"Mandatory field missing-E-mail\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length({E-mail})>70),\"Field length exceeded -E-mail\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(SIMPhoneNumber)),\"Mandatory field missing-SIMPhoneNumber\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(SIMPhoneNumber)>20),\"Field length exceeded -SIMPhoneNumber\",\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(SalesChannel)),\"Mandatory field missing-SalesChannel \",\niif((upper($Operation)==\"ENROLLMENT\") && (length(SalesChannel)>32),\"Field length exceeded -SalesChannel\",\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopID) && length(ShopID)>4) ,\"Field length exceeded -ShopID\",\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopName) && length(ShopName)>100) ,\"Field length exceeded -ShopName\",\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopZipCode) && length(ShopZipCode)>10) ,\"Field length exceeded -ShopZipCode\",\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopAddress) && length(ShopAddress)>100) ,\"Field length exceeded -ShopAddress\",\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopTelephoneNumber) && length(ShopTelephoneNumber)>11) ,\"Field length exceeded -ShopTelephoneNumber\",\n\"\"))))))) ))))))))))))))))))))))))))))),\n\t\tErrorcode = iif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && SalesNumberCount> 1 ,\"0001\", \niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && (isNull(Aggregate1@InitialSalesOrderNumber)),\"0002\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && (length(Aggregate1@InitialSalesOrderNumber)>28),\"0003\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && (isNull(CustomerID)),\"0004\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && (length(CustomerID)>30),\"0006\",\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(ApplyDate)) ,\"0007\",\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(ApplyDatetoString) || length(ApplyDatetoString)<1) ,\"0029\",\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(OpenDate)) ,\"0008\",\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(OpenDatetoString) || length(OpenDatetoString)<1) ,\"0030\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(LastName)),\"0011\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(LastName) >50),\"0012\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(FirstName)) ,\"0009\", \niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(FirstName) >50) ,\"0010\", \niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(LastNameKana)),\"0015\", \niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(LastNameKana) >50),\"0016\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(FirstNameKana)),\"0013\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(FirstNameKana) >50),\"0014\",\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(Birthday)) ,\"0016\", \niif((upper($Operation)==\"ENROLLMENT\") && (isNull(BirthDaytoString) || length(BirthDaytoString)<1) ,\"0031\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(PostalCode)),\"0017\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(PostalCode)!=7),\"0027\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(Address)),\"0018\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(Address)>100),\"0019\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(TelephoneNumber)),\"0020\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(TelephoneNumber)>15),\"0028\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull({E-mail})),\"0021\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length({E-mail})>70),\"0022\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(SIMPhoneNumber)),\"0023\",\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(SIMPhoneNumber)>20),\"0024\",\niif((upper($Operation)==\"ENROLLMENT\" ) && (isNull(SalesChannel)),\"0025\",\niif((upper($Operation)==\"ENROLLMENT\" ) && (length(SalesChannel)>32),\"0026\",\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopID) && length(ShopID)>4) ,\"033\",\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopName) && length(ShopName)>100) ,\"034\",\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopZipCode) && length(ShopZipCode)>10) ,\"035\",\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopAddress) && length(ShopAddress)>100) ,\"036\",\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopTelephoneNumber) && length(ShopTelephoneNumber)>11) ,\"037\",\n\"\"))))))) ))))))))))))))))))))))))))))),\n\t\tIsValid = iif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && SalesNumberCount> 1 ,\"0\", \r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && (isNull(Aggregate1@InitialSalesOrderNumber)),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && (length(Aggregate1@InitialSalesOrderNumber)>28),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && (isNull(CustomerID)),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\") && (length(CustomerID)>30),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(ApplyDate)) ,\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(ApplyDatetoString) || length(ApplyDatetoString)<1) ,\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(OpenDate)) ,\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(OpenDatetoString) || length(OpenDatetoString)<1) ,\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(FirstName)) ,\"0\", \r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(FirstName) >50) ,\"0\", \r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(LastName)),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(LastName) >50),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(FirstNameKana)),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(FirstNameKana) >50),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(LastNameKana)),\"0\", \r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(LastNameKana) >50),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(Birthday)) ,\"0\", \r\niif((upper($Operation)==\"ENROLLMENT\") && (isNull(BirthDaytoString) || length(BirthDaytoString)<1) ,\"0\", \r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(PostalCode)),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(PostalCode)!=7),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(Address)),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(Address)>100),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(TelephoneNumber)),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(TelephoneNumber)>15),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull({E-mail})),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length({E-mail})>70),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (isNull(SIMPhoneNumber)),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" || upper($Operation)==\"UPDATE\" ) && (length(SIMPhoneNumber)>20),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" ) && (isNull(SalesChannel)),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\" ) && (length(SalesChannel)>32),\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopID) && length(ShopID)>4) ,\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopName) && length(ShopName)>100) ,\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopZipCode) && length(ShopZipCode)>10) ,\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopAddress) && length(ShopAddress)>100) ,\"0\",\r\niif((upper($Operation)==\"ENROLLMENT\") && (!isNull(ShopTelephoneNumber) && length(ShopTelephoneNumber)>11) ,\"0\",\r\n\"1\"))))))) )))))))))))))))))))))))))))))) ~> Transform\nGetFileData select(mapColumn(\n\t\tInitialSalesOrderNumber,\n\t\tCustomerID,\n\t\tApplyDate,\n\t\tOpenDate,\n\t\tCloseDate,\n\t\tLastName,\n\t\tFirstName,\n\t\tLastNameKana,\n\t\tFirstNameKana,\n\t\tBirthday,\n\t\tPostalCode,\n\t\tAddress,\n\t\tTelephoneNumber,\n\t\t{E-mail},\n\t\tSIMPhoneNumber,\n\t\tShopID,\n\t\tSalesChannel,\n\t\tShopName,\n\t\tShopZipCode,\n\t\tShopAddress,\n\t\tShopTelephoneNumber,\n\t\tDisconnectionReason\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nGetFileData aggregate(groupBy(InitialSalesOrderNumber),\n\tSalesNumberCount = count(1)) ~> Aggregate1\nAggregate1, Select1 join(Aggregate1@InitialSalesOrderNumber == Select1@InitialSalesOrderNumber,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join1\nTransform derive(PartitionKey = upper($filename),\n\t\tRowKey = uuid(),\n\t\tData = @(type=iif($Operation==\"ENROLLMENT\", \"Create\", \"Update\"),\n\t\tstatus=iif(length(Errorcode)>0,\"Rejected\",\"Validated\"),\n\t\tcampaignCode=campaignCode,\n\t\t{customer.id}=coalesce(CustomerID, \"\"),\n\t\t{customer.firstName}=coalesce(FirstName, \"\"),\n\t\t{customer.lastName}=coalesce(LastName, \"\"),\n\t\t{customer.firstNameKana}=coalesce(FirstNameKana, \"\"),\n\t\t{customer.lastNameKana}=coalesce(LastNameKana, \"\"),\n\t\t{customer.dateOfBirth}=iif($Operation==\"ENROLLMENT\", coalesce(coalesce(BirthDaytoString),''),''),\n\t\t{customer.workPhoneNumber}=coalesce(TelephoneNumber, \"\"),\n\t\t{customer.cellPhoneNumber}=coalesce(SIMPhoneNumber, \"\"),\n\t\t{customer.emailAddress}=coalesce({E-mail}, \"\"),\n\t\t{customer.address1}=coalesce(replace(Address,',',' '), \"\"),\n\t\t{customer.zipCode}=coalesce(PostalCode, \"\"),\n\t\t{customer.countryCode}=\"JP\",\n\t\t{owner.organization.code}=\"ASJP-AJP-RSIM\",\n\t\t{owner.serviceLineNumber}=coalesce(SIMPhoneNumber, \"\"),\n\t\t{origin.organization.code}=iif($Operation==\"ENROLLMENT\", coalesce(ShopID, \"\"),''),\n\t\t{origin.organization.name}=iif($Operation==\"ENROLLMENT\", coalesce(ShopName, \"\"),''),\n\t\t{origin.organization.workPhoneNumber}=iif($Operation==\"ENROLLMENT\", coalesce(ShopTelephoneNumber, \"\"),''),\n\t\t{origin.organization.address1}=iif($Operation==\"ENROLLMENT\", coalesce(replace(ShopAddress,',',' '), \"\"),''),\n\t\t{origin.organization.zipCode}=iif($Operation==\"ENROLLMENT\", coalesce(ShopZipCode, \"\"),''),\n\t\t{origin.organization.countryCode}=\"JP\",\n\t\t{origin.organization.disconnectionReason}='',\n\t\t{origin.channelCode}=iif($Operation==\"ENROLLMENT\", coalesce(SalesChannel, \"\"),''),\n\t\t{origin.salesOrderNumber}=coalesce(Select1@InitialSalesOrderNumber, \"\"),\n\t\teffectiveDate=iif($Operation==\"ENROLLMENT\", coalesce(coalesce(ApplyDatetoString),''),''),\n\t\topenDate=iif($Operation==\"ENROLLMENT\", coalesce(coalesce(OpenDatetoString),''),''),\n\t\tcloseDate=iif($Operation==\"ENROLLMENT\", coalesce(coalesce(CloseDatetoString),''),''),\n\t\terrors=array(iif(length(Errorcode)>0,@(code=Errorcode,\n\t\tdescription=Error))))) ~> TransformToFileDetails\nTransformToFileDetails derive(PartitionKey = PartitionKey,\n\t\tRowKey = RowKey,\n\t\tData_String = toString(Data)) ~> TransformToFileDetailsCSV\nTransform aggregate(groupBy(fileName = $filename),\n\tRejectedRecords = sum(iif(IsValid==\"0\", 1, 0)),\n\t\tValidatedRecords = sum(iif(IsValid==\"1\", 1, 0))) ~> Aggregate2\nAggregate2 derive(partitionKey = upper($filename),\n\t\trowKey = concat('FileInfo-',fileName),\n\t\tdata = @(status=\"Loaded\",\n\t\tvalidatedRecords=ValidatedRecords,\n\t\trejectedRecords=RejectedRecords,\n\t\tqueuedRecords=0,\n\t\tprocessedRecords=0,\n\t\terrors=array()),\n\t\tRejected = iif((RejectedRecords+ValidatedRecords)==RejectedRecords, \"1\",\"0\")) ~> TransformFileinfo\nTransformFileinfo derive(partitionKey = partitionKey,\n\t\trowKey = rowKey,\n\t\tData_String = toString(data),\n\t\tStatus = \"Loaded\") ~> TransformFileInfoCSV\nCheckDateColumnsYear derive(BirthDaytoString = iif(IsBirthDayYearValid==1,{BirthDaytoDate},''),\n\t\tApplyDatetoString = iif(IsApplyDateYearValid==1,{ApplyDatetoDate},''),\n\t\tOpenDatetoString = iif(IsOpenDateYearValid==1,{OpenDatetoDate},''),\n\t\tCloseDatetoString = iif(IsCloseDateYearValid==1,{CloseDatetoDate},'')) ~> TransformDateFields\nJoin1 derive(IsBirthDayYearValid = iif(year(toDate(Birthday, 'yyyy/MM/dd'))>=1000,1,0),\n\t\tBirthDaytoDate = toString(toDate(Birthday, 'yyyy/MM/dd')),\n\t\tIsApplyDateYearValid = iif(year(toDate(ApplyDate, 'yyyy/MM/dd'))>=1000,1,0),\n\t\tApplyDatetoDate = toString(toDate(ApplyDate, 'yyyy/MM/dd')),\n\t\tIsOpenDateYearValid = iif(year(toDate(OpenDate, 'yyyy/MM/dd'))>=1000,1,0),\n\t\tOpenDatetoDate = toString(toDate(OpenDate, 'yyyy/MM/dd')),\n\t\tIsCloseDateYearValid = iif(year(toDate(CloseDate, 'yyyy/MM/dd'))>=1000,1,0),\n\t\tCloseDatetoDate = toString(toDate(CloseDate, 'yyyy/MM/dd'))) ~> CheckDateColumnsYear\nTransformToFileDetailsCSV sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(replace(upper($filename), \".TXT\", \".csv\"))],\n\tmapColumn(\n\t\tPartitionKey,\n\t\tRowKey,\n\t\tData = Data_String\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ProcessToFileDetails\nTransformFileInfoCSV sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(replace(upper($filename), \".TXT\", \".csv\"))],\n\tmapColumn(\n\t\tPartitionKey = partitionKey,\n\t\tRowKey = rowKey,\n\t\tData = Data_String,\n\t\tStatus\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ProcessToFileInfo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_solicit_files')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_solicit_files_processor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_solicit_files_process_error')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_blob_solicit_json",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_blob_solicit_files_processor",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "parameters{\n\tfilename as string\n}\nsource(output(\n\t\tcampaignCode as string,\n\t\tcloseDate as string,\n\t\t{customer.address1} as string,\n\t\t{customer.countryCode} as string,\n\t\t{customer.dateOfBirth} as string,\n\t\t{customer.emailAddress} as string,\n\t\t{customer.firstName} as string,\n\t\t{customer.firstNameKana} as string,\n\t\t{customer.id} as string,\n\t\t{customer.lastName} as string,\n\t\t{customer.lastNameKana} as string,\n\t\t{customer.workPhoneNumber} as string,\n\t\t{customer.zipCode} as string,\n\t\teffectiveDate as string,\n\t\terrors as (code as string, description as string)[],\n\t\topenDate as string,\n\t\t{origin.channelCode} as string,\n\t\t{origin.organization.address1} as string,\n\t\t{origin.organization.code} as string,\n\t\t{origin.organization.countryCode} as string,\n\t\t{origin.organization.disconnectionReason} as string,\n\t\t{origin.organization.name} as string,\n\t\t{origin.organization.workPhoneNumber} as string,\n\t\t{origin.organization.zipCode} as string,\n\t\t{origin.salesOrderNumber} as string,\n\t\t{owner.organization.code} as string,\n\t\t{owner.serviceLineNumber} as string,\n\t\tstatus as string,\n\t\ttype as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource1 filter(upper(status)=='REJECTED') ~> Filter1\nFilter1 derive(error_code = iif(length(errors[1].code)>0, toString(errors[1].code),\"\"),\n\t\terror_description = iif(length(errors[1].description)>0, toString(errors[1].description),\"\"),\n\t\tBirthDaytoString = coalesce(toString(toDate({customer.dateOfBirth}, 'yyyy-MM-dd'),'yyyy/MM/dd'),{customer.dateOfBirth}),\n\t\tApplyDatetoString = coalesce(toString(toDate(effectiveDate, 'yyyy-MM-dd'),'yyyy/MM/dd'),effectiveDate),\n\t\topenDatetoString = coalesce(toString(toDate(openDate, 'yyyy-MM-dd'),'yyyy/MM/dd'),openDate),\n\t\tCloseDatetoString = coalesce(toString(toDate(closeDate, 'yyyy-MM-dd'),'yyyy/MM/dd'),closeDate)) ~> DerivedColumn1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(replace(upper($filename), upper(\".txt\"), \".ERR\"))],\n\tmapColumn(\n\t\tInitialSalesOrderNumber = {origin.salesOrderNumber},\n\t\tCustomerID = {customer.id},\n\t\tApplyDate = ApplyDatetoString,\n\t\tOpenDate = openDatetoString,\n\t\tCloseDate = CloseDatetoString,\n\t\tLastName = {customer.lastName},\n\t\tFirstName = {customer.firstName},\n\t\tLastNameKana = {customer.lastNameKana},\n\t\tFirstNameKana = {customer.firstNameKana},\n\t\tBirthday = BirthDaytoString,\n\t\tPostalCode = {customer.zipCode},\n\t\tAddress = {customer.address1},\n\t\tTelephoneNumber = {customer.workPhoneNumber},\n\t\t{E-mail} = {customer.emailAddress},\n\t\tSIMPhoneNumber = {owner.serviceLineNumber},\n\t\tShopID = {origin.organization.code},\n\t\tSalesChannel = {origin.channelCode},\n\t\tShopName = {origin.organization.name},\n\t\tShopZipCode = {origin.organization.zipCode},\n\t\tShopAddress = {origin.organization.address1},\n\t\tShopTelephoneNumber = {origin.organization.workPhoneNumber},\n\t\tDisconnectionReason = {origin.organization.disconnectionReason},\n\t\tRejectCode = error_code,\n\t\tRejectDescription = error_description\n\t),\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_solicit_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_solicit_files_processor')]"
			]
		}
	]
}